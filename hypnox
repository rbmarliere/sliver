#!/usr/bin/env python3

import argparse
import logging

import src as hypnox

logging.basicConfig(format='hypnox: %(levelname)s: %(message)s',
                    level=logging.INFO)
description = """
              _        _
     |_| \\_/ |_) |\\ | / \\ \\/
     | |  |  |   | \\| \\_/ /\\

       sub noctem sapientia
    """

argp = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                               description=description)

sub_parsers = argp.add_subparsers(title="commands",
                                  dest="command",
                                  required=True)

backtest_parser = sub_parsers.add_parser(
    "backtest", help="backtest a strategy against a timeframe")
backtest_parser.add_argument("-s",
                             "--strategy",
                             help="name of the strategy to backtest",
                             required=True)
backtest_parser.set_defaults(func=hypnox.strategy.backtest)

download_parser = sub_parsers.add_parser("download",
                                         help="download price data")
download_parser.add_argument("-s",
                             "--symbol",
                             help="symbol to download from e.g. BTCUSDT",
                             required=True)
download_parser.add_argument("--since",
                             help="start date to download from e.g. 20110601",
                             required=True)
download_parser.add_argument("-t",
                             "--timeframe",
                             help="e.g. 15m, 1h, 4h, 12h, 1d, 3d, 1w, 1M",
                             required=True)
download_parser.set_defaults(func=hypnox.exchange.download)

refresh_parser = sub_parsers.add_parser("refresh",
                                        help="refresh positions and orders")
refresh_parser.add_argument("-s",
                            "--strategy",
                            help="name of the strategy to use",
                            required=True)
refresh_parser.set_defaults(func=hypnox.exchange.refresh)

replay_parser = sub_parsers.add_parser(
    "replay", help="use a trained model to replay a database")
replay_parser.add_argument("-m",
                           "--model",
                           help="name of the model to use",
                           required=True)
replay_parser.set_defaults(func=hypnox.db.replay)

stream_parser = sub_parsers.add_parser("stream",
                                       help="stream twitter in real time")
stream_parser.set_defaults(func=hypnox.twitter.stream)

train_parser = sub_parsers.add_parser("train", help="train a model")
train_parser.add_argument("-m",
                          "--model",
                          help="name of the model to save",
                          required=True)
train_parser.set_defaults(func=hypnox.model.train)

args = argp.parse_args()
args.func(args)
